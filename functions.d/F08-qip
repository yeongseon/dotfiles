#=====  FUNCTION  =============================================================
#          NAME:  qipDeleteAddresses
#   DESCRIPTION:  Removes an address, or list of addresses, from the QIP database
#    PARAMETERS:  Address or path to file containing addresses
#       RETURNS:  0 if success, 1 otherwise
#==============================================================================
function qipDeleteAddresses
{
    typeset SCRIPT_NAME="F08-qip";
    typeset FUNCTION_NAME="${FUNCNAME[0]}";
    typeset -i RETURN_CODE=0;
    typeset -i ERROR_COUNT=0;

    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} START: $(/usr/bin/env date +"${TIMESTAMP_OPTS}")";
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i START_EPOCH=$(/usr/bin/env date +"%s");

    [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -v || set +v;

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} -> enter";
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "Provided arguments: ${*}";

    if [ ${#} -ne 1 ]
    then
        RETURN_CODE=3;

        writeLogEntry "STDERR" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} - Deletes a provided list of addresses";
        writeLogEntry "STDERR" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "Usage: ${FUNCTION_NAME} [ (address|address list) ]
                -> A single address to remove, or the full path to a list of addresses to remove.";

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "RETURN_CODE -> ${RETURN_CODE}";
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} -> exit";

        [ ! -z "${ERROR_COUNT}" ] && unset -v ERROR_COUNT;
        [ ! -z "${ADDRESSES}" ] && unset -v ADDRESSES;
        [ ! -z "${ADDRESS}" ] && unset -v ADDRESS;

        [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
        [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x || set +x;

        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/usr/bin/env date +"%s");
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${DEBUG_NAME}" "${SCRIPT_NAME}" "${LINENO}" "${DEBUG_NAME} TOTAL RUNTIME: $(( RUNTIME / 60)) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60)) SECONDS";
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${DEBUG_NAME}" "${SCRIPT_NAME}" "${LINENO}" "${DEBUG_NAME} END: $(/usr/bin/env date +"${TIMESTAMP_OPTS}")";

        [ ! -z "${FUNCTION_NAME}" ] && unset -v FUNCTION_NAME;
        [ ! -z "${SCRIPT_NAME}" ] && unset -v SCRIPT_NAME;

        return ${RETURN_CODE};
    fi

    [ -f "${1}" ] && setArray ADDRESSES $(<${1}) || typeset ADDRESSES="${1}";
    typeset SCRIPT_NAME="F08-qip";
    typeset FUNCTION_NAME="${FUNCNAME[0]}";

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "ADDRESSES -> ${ADDRESSES}";

    for ADDRESS in ${ADDRESSES[@]}
    do
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "Removing address: ${ADDRESS}";
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "Executing command ${QIPHOME}/cli/qip-cli -c v4address,delete -a ${ADDRESS} ...";

        ${QIPHOME}/cli/qip-del -u "${LOGNAME}" -p "$(<~/.etc/qip/password)" -a "${ADDRESS}" -t object -e;
        typeset -i RETURN_CODE=${?};

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "RETURN_CODE -> ${RETURN_CODE}";

        if [ ${RETURN_CODE} -ne 0 ]
        then
            writeLogEntry "ERROR" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "Failed to remove address ${ADDRESS}";
            writeLogEntry "STDERR" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "Failed to remove address ${ADDRESS}";

            (( ERROR_COUNT += 1 ));
        fi

        [ ! -z "${ADDRESS}" ] && unset -v ADDRESS;
    done

    typeset -i RETURN_CODE=${ERROR_COUNT};

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "RETURN_CODE -> ${RETURN_CODE}";
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} -> exit";

    [ ! -z "${ERROR_COUNT}" ] && unset -v ERROR_COUNT;
    [ ! -z "${ADDRESSES}" ] && unset -v ADDRESSES;
    [ ! -z "${ADDRESS}" ] && unset -v ADDRESS;

    [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x || set +x;

    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/usr/bin/env date +"%s");
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${DEBUG_NAME}" "${SCRIPT_NAME}" "${LINENO}" "${DEBUG_NAME} TOTAL RUNTIME: $(( RUNTIME / 60)) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60)) SECONDS";
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${DEBUG_NAME}" "${SCRIPT_NAME}" "${LINENO}" "${DEBUG_NAME} END: $(/usr/bin/env date +"${TIMESTAMP_OPTS}")";

    [ ! -z "${FUNCTION_NAME}" ] && unset -v FUNCTION_NAME;
    [ ! -z "${SCRIPT_NAME}" ] && unset -v SCRIPT_NAME;

    return ${RETURN_CODE};
}

#=====  FUNCTION  =============================================================
#          NAME:  addQIPObjectRecords
#   DESCRIPTION:  Adds object-level resource records to QIP
#    PARAMETERS:  Input file containing data
#       RETURNS:  0 if success, 1 otherwise
#==============================================================================
function addQIPObjectRecords
{
    typeset SCRIPT_NAME="F08-qip";
    typeset FUNCTION_NAME="${FUNCNAME[0]}";
    typeset -i RETURN_CODE=0;
    typeset ADD_RECORD_HOME="${HOME}/Changes/RecordAdds";

    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} START: $(/usr/bin/env date +"${TIMESTAMP_OPTS}")";
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i START_EPOCH=$(/usr/bin/env date +"%s");

    [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -v || set +v;

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} -> enter";
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "Provided arguments: ${*}";

    [ ${#} -eq 0 ] && typeset INPUTFILE="${ADD_OBJECT_HOME}/add-records.txt" || typeset INPUTFILE="${1}";

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "INPUTFILE -> ${INPUTFILE}";

    if [ -s "${INPUTFILE}" ]
    then
        RETURN_CODE=3;

        writeLogEntry "STDERR" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} - Add resource records to a provided object";
        writeLogEntry "STDERR" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "Usage: ${FUNCTION_NAME} ( filename )
                 -> The file name containing the necessary data";

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "RETURN_CODE -> ${RETURN_CODE}";
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} -> exit";

        [ ! -z "${ADD_RECORD_HOME}" ] && unset -v ADD_RECORD_HOME;
        [ ! -z "${INPUTFILE}" ] && unset -v INPUTFILE;
        [ ! -z "${RECORD_TEMPLATE}" ] && unset -v RECORD_TEMPLATE;
        [ ! -z "${ADD_INPUT_FILE}" ] && unset -v ADD_INPUT_FILE;
        [ ! -z "${CLI_LOG_FILE}" ] && unset -v CLI_LOG_FILE;
        [ ! -z "${RESOURCE_ENTRY}" ] && unset -v RESOURCE_ENTRY;
        [ ! -z "${OWNER_NAME}" ] && unset -v OWNER_NAME;
        [ ! -z "${RECORD_TYPE}" ] && unset -v RECORD_TYPE;
        [ ! -z "${OBJECT_ADDRESS}" ] && unset -v OBJECT_ADDRESS;

        [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
        [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x || set +x;

        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/usr/bin/env date +"%s");
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${DEBUG_NAME}" "${SCRIPT_NAME}" "${LINENO}" "${DEBUG_NAME} TOTAL RUNTIME: $(( RUNTIME / 60)) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60)) SECONDS";
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${DEBUG_NAME}" "${SCRIPT_NAME}" "${LINENO}" "${DEBUG_NAME} END: $(/usr/bin/env date +"${TIMESTAMP_OPTS}")";

        [ ! -z "${FUNCTION_NAME}" ] && unset -v FUNCTION_NAME;
        [ ! -z "${SCRIPT_NAME}" ] && unset -v SCRIPT_NAME;

        return ${RETURN_CODE};
    fi

    typeset RECORD_TEMPLATE="${ADD_RECORD_HOME}/record-template.xml";
    typeset ADD_INPUT_FILE="${ADD_RECORD_HOME}/add-records.xml";
    typeset CLI_LOG_FILE="${LOG_ROOT}/v4address-add.rejects";

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "RECORD_TEMPLATE -> ${RECORD_TEMPLATE}";
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "ADD_INPUT_FILE -> ${ADD_INPUT_FILE}";
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "CLI_LOG_FILE -> ${CLI_LOG_FILE}";

    for RESOURCE_ENTRY in $(<${INPUTFILE})
    do
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "RESOURCE_ENTRY -> ${RESOURCE_ENTRY}";

        typeset OWNER_NAME="$(cut -d "," -f 1 <<< "${RESOURCE_ENTRY}")";
        typeset RECORD_TYPE="$(cut -d "," -f 2 <<< "${RESOURCE_ENTRY}")";
        typeset OBJECT_ADDRESS="$(cut -d "," -f 3 <<< "${RESOURCE_ENTRY}")";

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "OWNER_NAME -> ${OWNER_NAME}";
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "RECORD_TYPE -> ${RECORD_TYPE}";
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "OBJECT_ADDRESS -> ${OBJECT_ADDRESS}";

        /usr/bin/env sed -e "s/@OWNER_NAME/${OWNER_NAME}/g" -e "s/@RECORD_TYPE/${RECORD_TYPE}//g" -e "s/@OBJECT_ADDRESS/${OBJECT_ADDRESS}/g" "${RECORD_TEMPLATE}" >> "${ADD_INPUT_FILE}";

        [ ! -z "${OWNER_NAME}" ] && unset -v OWNER_NAME;
        [ ! -z "${RECORD_TYPE}" ] && unset -v RECORD_TYPE;
        [ ! -z "${OBJECT_ADDRESS}" ] && unset -v OBJECT_ADDRESS;
        [ ! -z "${object}" ] && unset -v object;
    done

    [ -s "${CLI_LOG_FILE}" ] && cat /dev/null > "${CLI_LOG_FILE}";

    ${QIPHOME}/cli/qip-cli -c v4address,add --input "${ADD_INPUT_FILE}" -r "${CLI_LOG_FILE}" --addselected --format xml;
    typeset RETURN_CODE=${?};

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "RETURN_CODE -> ${RETURN_CODE}";
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} -> exit";

    [ ! -z "${ADD_RECORD_HOME}" ] && unset -v ADD_RECORD_HOME;
    [ ! -z "${INPUTFILE}" ] && unset -v INPUTFILE;
    [ ! -z "${RECORD_TEMPLATE}" ] && unset -v RECORD_TEMPLATE;
    [ ! -z "${ADD_INPUT_FILE}" ] && unset -v ADD_INPUT_FILE;
    [ ! -z "${CLI_LOG_FILE}" ] && unset -v CLI_LOG_FILE;
    [ ! -z "${RESOURCE_ENTRY}" ] && unset -v RESOURCE_ENTRY;
    [ ! -z "${OWNER_NAME}" ] && unset -v OWNER_NAME;
    [ ! -z "${RECORD_TYPE}" ] && unset -v RECORD_TYPE;
    [ ! -z "${OBJECT_ADDRESS}" ] && unset -v OBJECT_ADDRESS;

    [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x || set +x;

    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/usr/bin/env date +"%s");
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${DEBUG_NAME}" "${SCRIPT_NAME}" "${LINENO}" "${DEBUG_NAME} TOTAL RUNTIME: $(( RUNTIME / 60)) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60)) SECONDS";
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${DEBUG_NAME}" "${SCRIPT_NAME}" "${LINENO}" "${DEBUG_NAME} END: $(/usr/bin/env date +"${TIMESTAMP_OPTS}")";

    [ ! -z "${FUNCTION_NAME}" ] && unset -v FUNCTION_NAME;
    [ ! -z "${SCRIPT_NAME}" ] && unset -v SCRIPT_NAME;

    return ${RETURN_CODE};
}

#=====  FUNCTION  =============================================================
#          NAME:  addQIPObjects
#   DESCRIPTION:  Adds new objects to QIP
#    PARAMETERS:  Input file containing data
#       RETURNS:  0 if success, 1 otherwise
#==============================================================================
function addQIPObjects
{
    typeset SCRIPT_NAME="F08-qip";
    typeset FUNCTION_NAME="${FUNCNAME[0]}";
    typeset -i RETURN_CODE=0;
    typeset ADD_RECORD_HOME="${HOME}/Changes/ObjectAdds";

    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} START: $(/usr/bin/env date +"${TIMESTAMP_OPTS}")";
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i START_EPOCH=$(/usr/bin/env date +"%s");

    [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -v || set +v;

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} -> enter";
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "Provided arguments: ${*}";

    [ ${#} -eq 0 ] && typeset INPUTFILE="${ADD_OBJECT_HOME}/add-objects.txt" || typeset INPUTFILE="${1}";

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "INPUTFILE -> ${INPUTFILE}";

    if [ -s "${INPUTFILE}" ]
    then
        RETURN_CODE=3;

        writeLogEntry "STDERR" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} - Add new objects to QIP";
        writeLogEntry "STDERR" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "Usage: ${FUNCTION_NAME} ( filename )
                 -> The file name containing the necessary data";

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "RETURN_CODE -> ${RETURN_CODE}";
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} -> exit";

        [ ! -z "${ADD_OBJECT_HOME}" ] && unset -v ADD_OBJECT_HOME;
        [ ! -z "${RETURN_CODE}" ] && unset -v RETURN_CODE;
        [ ! -z "${INPUTFILE}" ] && unset -v INPUTFILE;
        [ ! -z "${OBJECT_TEMPLATE}" ] && unset -v OBJECT_TEMPLATE;
        [ ! -z "${ADD_INPUT_FILE}" ] && unset -v ADD_INPUT_FILE;
        [ ! -z "${CLI_LOG_FILE}" ] && unset -v CLI_LOG_FILE;
        [ ! -z "${OBJECT_ENTRY}" ] && unset -v OBJECT_ENTRY;
        [ ! -z "${OWNER_NAME}" ] && unset -v OWNER_NAME;
        [ ! -z "${OBJECT_ADDRESS}" ] && unset -v OBJECT_ADDRESS;
        [ ! -z "${DOMAIN_NAME}" ] && unset -v DOMAIN_NAME;

        [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
        [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x || set +x;

        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/usr/bin/env date +"%s");
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} TOTAL RUNTIME: $(( RUNTIME / 60)) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60)) SECONDS";
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} END: $(/usr/bin/env date +"${TIMESTAMP_OPTS}")";

        [ ! -z "${FUNCTION_NAME}" ] && unset -v FUNCTION_NAME;
        [ ! -z "${SCRIPT_NAME}" ] && unset -v SCRIPT_NAME;

        return ${RETURN_CODE};
    fi

    typeset OBJECT_TEMPLATE="${ADD_OBJECT_HOME}/object-template.xml";
    typeset ADD_TEMP_DIR="$(/usr/bin/env mktemp -p /var/tmp -d)";

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "OBJECT_TEMPLATE -> ${OBJECT_TEMPLATE}";
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "ADD_INPUT_FILE -> ${ADD_TEMP_DIR}";

    for OBJECT_ENTRY in $(<${INPUTFILE})
    do
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "OBJECT_ENTRY -> ${OBJECT_ENTRY}";

        [[ "${OBJECT_ENTRY}" =~ ^#.* ]] && continue;

        typeset OWNER_NAME="$(cut -d "," -f 1 <<< "${OBJECT_ENTRY}")";
        typeset OBJECT_ADDRESS="$(cut -d "," -f 2 <<< "${OBJECT_ENTRY}")";
        typeset DOMAIN_NAME="$(cut -d "," -f 3 <<< "${OBJECT_ENTRY}")";

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "OWNER_NAME -> ${OWNER_NAME}";
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "OBJECT_ADDRESS -> ${OBJECT_ADDRESS}";
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "DOMAIN_NAME -> ${DOMAIN_NAME}";

        [ -z "${DOMAIN_NAME}" ] && DOMAIN_NAME="prod.mtb.com";

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "DOMAIN_NAME -> ${DOMAIN_NAME}";

        /usr/bin/env sed -e "s/@OWNER_NAME/${OWNER_NAME}/g" -e "s/@OBJECT_ADDRESS/${OBJECT_ADDRESS}/g" -e "s/@DOMAIN_NAME/${DOMAIN_NAME}/g" "${OBJECT_TEMPLATE}" > "${ADD_TEMP_DIR}/${OWNER_NAME}.xml";

        [ ! -z "${OWNER_NAME}" ] && unset -v OWNER_NAME;
        [ ! -z "${OBJECT_ADDRESS}" ] && unset -v OBJECT_ADDRESS;
        [ ! -z "${DOMAIN_NAME}" ] && unset -v DOMAIN_NAME;
        [ ! -z "${OBJECT_ENTRY}" ] && unset -v OBJECT_ENTRY;
    done

    [ -s "${CLI_LOG_FILE}" ] && cat /dev/null > "${CLI_LOG_FILE}";

    for XML_INPUT in ${ADD_TEMP_DIR}/*.xml
    do
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "XML_INPUT -> ${XML_INPUT}";

        if [ ${RETURN_CODE} -ne 0 ]
        then
            writeLogEntry "ERROR" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "Requested operation failed. Return code => ${RETURN_CODE}";
            writeLogEntry "STDERR" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "Requested operation failed. Return code => ${RETURN_CODE}";

            (( ERROR_COUNT += 1 ));
        fi

        [ ! -z "${CLI_LOG_FILE}" ] && unset -v CLI_LOG_FILE;
        [ ! -z "${RETURN_CODE}" ] && unset -v RETURN_CODE;
        [ ! -z "${XML_INPUT}" ] && unset -v XML_INPUT;
    done

    typeset -i RETURN_CODE=${ERROR_COUNT};

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "RETURN_CODE -> ${RETURN_CODE}";
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "FUNCTION_NAME -> exit";

    [ ! -z "${ADD_OBJECT_HOME}" ] && unset -v ADD_OBJECT_HOME;
    [ ! -z "${RETURN_CODE}" ] && unset -v RETURN_CODE;
    [ ! -z "${INPUTFILE}" ] && unset -v INPUTFILE;
    [ ! -z "${OBJECT_TEMPLATE}" ] && unset -v OBJECT_TEMPLATE;
    [ ! -z "${ADD_INPUT_FILE}" ] && unset -v ADD_INPUT_FILE;
    [ ! -z "${CLI_LOG_FILE}" ] && unset -v CLI_LOG_FILE;
    [ ! -z "${OBJECT_ENTRY}" ] && unset -v OBJECT_ENTRY;
    [ ! -z "${OWNER_NAME}" ] && unset -v OWNER_NAME;
    [ ! -z "${OBJECT_ADDRESS}" ] && unset -v OBJECT_ADDRESS;
    [ ! -z "${DOMAIN_NAME}" ] && unset -v DOMAIN_NAME;

    [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x || set +x;

    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/usr/bin/env date +"%s");
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} TOTAL RUNTIME: $(( RUNTIME / 60)) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60)) SECONDS";
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} END: $(/usr/bin/env date +"${TIMESTAMP_OPTS}")";

    [ ! -z "${FUNCTION_NAME}" ] && unset -v FUNCTION_NAME;
    [ ! -z "${SCRIPT_NAME}" ] && unset -v SCRIPT_NAME;

    return ${RETURN_CODE};
}

#=====  FUNCTION  =============================================================
#          NAME:  pushDNS
#   DESCRIPTION:  Pushes updates to all DNS
#    PARAMETERS:  None
#       RETURNS:  0 if success, 1 otherwise
#==============================================================================
function pushDNS
{
    typeset SCRIPT_NAME="F08-qip";
    typeset FUNCTION_NAME="${FUNCNAME[0]}";
    typeset -i RETURN_CODE=0;
    typeset -i RET_CODE=0;
    typeset -i ERROR_COUNT=0;

    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} START: $(/usr/bin/env date +"${TIMESTAMP_OPTS}")";
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i START_EPOCH=$(/usr/bin/env date +"%s");

    [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -v || set +v;

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} -> enter";
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "Provided arguments: ${*}";

    if [ ${#} -ne 1 ]
    then
        RETURN_CODE=3;

        writeLogEntry "STDERR" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} - Pushes updates (configuration/data and reload) to all enterprise DNS servers";

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "RETURN_CODE -> ${RETURN_CODE}";
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} -> exit";

        [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
        [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x || set +x;

        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/usr/bin/env date +"%s");
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} TOTAL RUNTIME: $(( RUNTIME / 60)) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60)) SECONDS";
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} END: $(/usr/bin/env date +"${TIMESTAMP_OPTS}")";

        [ ! -z "${FUNCTION_NAME}" ] && unset -v FUNCTION_NAME;
        [ ! -z "${SCRIPT_NAME}" ] && unset -v SCRIPT_NAME;

        return ${RETURN_CODE};
    fi

    for QIP_SERVER in $(<${QIP_SERVER_LIST})
    do
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} DNS PUSH:${QIP_SERVER}/START: $(date +"${TIMESTAMP_OPTS}")";
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i START_EPOCH=$(date +"%s");

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "QIP_SERVER -> ${QIP_SERVER}";

        ${QIPHOME}/cli/qip-dnsgen -u "${LOGNAME}" -p "$(<~/.etc/qip/password)" -n "${QIP_SERVER}" 1>/dev/null 2>${LOG_ROOT}/${QIP_SERVER}.err;
        typeset -i RET_CODE=${?};

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "RET_CODE -> ${RET_CODE}";

        if [ ! -z "${RET_CODE}" -a ${RET_CODE} -ne 0 ]
        then
            writeLogEntry "ERROR" "DNS push FAILED. Please review QIP logs.";
            writeLogEntry "STDERR" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "DNS push FAILED. Please review QIP logs.";

            (( ERROR_COUNT += 1 ));
        fi

        [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
        [ ! -z "${QIP_SERVER}" ] && unset -v QIP_SERVER;

        [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
        [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -v || set +v;

        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(date +"%s");
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} TOTAL RUNTIME: $(( RUNTIME / 60 )) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60 )) SECONDS";
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} DNS PUSH:${QIP_SERVER}/END: $(date +"${TIMESTAMP_OPTS}")";
    done

    typeset -i RETURN_CODE=${ERROR_COUNT};

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "RETURN_CODE -> ${RETURN_CODE}";
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} -> exit";

    [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
    [ ! -z "${QIP_SERVER}" ] && unset -v QIP_SERVER;
    [ ! -z "${ERROR_COUNT}" ] && unset -v ERROR_COUNT;

    [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x || set +x;

    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/usr/bin/env date +"%s");
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} TOTAL RUNTIME: $(( RUNTIME / 60)) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60)) SECONDS";
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} END: $(/usr/bin/env date +"${TIMESTAMP_OPTS}")";

    [ ! -z "${FUNCTION_NAME}" ] && unset -v FUNCTION_NAME;
    [ ! -z "${SCRIPT_NAME}" ] && unset -v SCRIPT_NAME;

    return ${RETURN_CODE};
}

#=====  FUNCTION  =============================================================
#          NAME:  fixPrinterRecords
#   DESCRIPTION:  Fixes printer A records removed by printer DDNS updates
#    PARAMETERS:  Address or path to file containing addresses
#       RETURNS:  0 if success, 1 otherwise
#==============================================================================
function fixPrinterRecords
{
    typeset SCRIPT_NAME="F08-qip";
    typeset FUNCTION_NAME="${FUNCNAME[0]}";
    typeset -i RETURN_CODE=0;
    typeset -i ERROR_COUNT=0;

    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} START: $(/usr/bin/env date +"${TIMESTAMP_OPTS}")";
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i START_EPOCH=$(/usr/bin/env date +"%s");

    [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -v || set +v;

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} -> enter";
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "Provided arguments: ${*}";

    if [ ${#} -ne 1 ]
    then
        RETURN_CODE=3;

        writeLogEntry "STDERR" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} - Performs a DNS generation against DNS servers to re-populate removed records of printers";
        writeLogEntry "STDERR" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "Usage: ${FUNCTION_NAME} [ address|address list ]
                -> The domain that the printer is housed in.";

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "RETURN_CODE -> ${RETURN_CODE}";
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} -> exit";

        [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
        [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x || set +x;

        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/usr/bin/env date +"%s");
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} TOTAL RUNTIME: $(( RUNTIME / 60)) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60)) SECONDS";
        [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} END: $(/usr/bin/env date +"${TIMESTAMP_OPTS}")";

        [ ! -z "${FUNCTION_NAME}" ] && unset -v FUNCTION_NAME;
        [ ! -z "${SCRIPT_NAME}" ] && unset -v SCRIPT_NAME;

        return ${RETURN_CODE};
    fi

    [ -f "${1}" ] && setArray ADDRESSES ${1} || typeset ADDRESSES="${1}";
    typeset SCRIPT_NAME="F08-qip";
    typeset FUNCTION_NAME="${FUNCNAME[0]}";

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "ADDRESSES -> ${ADDRESSES}";

    for ADDRESS in ${ADDRESSES[@]}
    do
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "Removing address: ${ADDRESS}";
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "Executing command qip-getobjectprof -a ${ADDRESS} | grep SubnetAddress | cut -d \"=\" -f 2 ...";

        typset SUBNET=$(qip-getobjectprof -a ${ADDRESS} | grep SubnetAddress | cut -d "=" -f 2);

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "SUBNET -> ${SUBNET}";

        if [ -z "${SUBNET}" ]
        then
            writeLogEntry "ERROR" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "Unable to obtain subnet address for ${ADDRESS}";
            writeLogEntry "STDERR" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "Unable to obtain subnet address for ${ADDRESS}";

            (( ERROR_COUNT += 1 ));

            continue;
        fi

        typeset DNSSVR=$(qip-getsubnetprof -a ${SUBNET} | grep DNSServers | cut -d "=" -f 2 | awk '{print $1}');

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "DNSSVR -> ${DNSSVR}";

        if [ -z "${DNSSVR}" ]
        then
            writeLogEntry "ERROR" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "Unable to obtain DNS server for ${SUBNET}";
            writeLogEntry "STDERR" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "Unable to obtain DNS server for ${SUBNET}";

            (( ERROR_COUNT += 1 ));

            continue;
        fi

        qip-dnsgen -n "${DNSSVR}";
        typeset -i RET_CODE=${?};

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "RET_CODE -> ${RET_CODE}";

        if [ -z "${RET_CODE}" || ${RET_CODE} != 0 ]
        then
            writeLogEntry "ERROR" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "Failed to perform DNS generation against for ${DNSSVR}";
            writeLogEntry "STDERR" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "Failed to perform DNS generation against for ${DNSSVR}";

            (( ERROR_COUNT += 1 ));

            continue;
        fi

        [ ! -z "${SUBNET}" ] && unset -v SUBNET;
        [ ! -z "${DNSSVR}" ] && unset -v DNSSVR;
        [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
        [ ! -z "${ADDRESS}" ] && unset -v ADDRESS;
    done

    typeset -i RETURN_CODE=${ERROR_COUNT};

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "RETURN_CODE -> ${RETURN_CODE}";
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} -> exit";

    [ ! -z "${ERROR_COUNT}" ] && unset -v ERROR_COUNT;
    [ ! -z "${ADDRESSES}" ] && unset -v ADDRESSES;
    [ ! -z "${ADDRESS}" ] && unset -v ADDRESS;

    [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x || set +x;

    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/usr/bin/env date +"%s");
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} TOTAL RUNTIME: $(( RUNTIME / 60)) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60)) SECONDS";
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} END: $(/usr/bin/env date +"${TIMESTAMP_OPTS}")";

    [ ! -z "${FUNCTION_NAME}" ] && unset -v FUNCTION_NAME;
    [ ! -z "${SCRIPT_NAME}" ] && unset -v SCRIPT_NAME;

    return ${RETURN_CODE};
}

#=====  FUNCTION  =============================================================
#          NAME:  listCurrentAdmins
#   DESCRIPTION:  Lists all current administrators housed in QIP
#    PARAMETERS:  None
#       RETURNS:  0 if success, 1 otherwise
#==============================================================================
function listCurrentAdmins
{
    typeset SCRIPT_NAME="F08-qip";
    typeset FUNCTION_NAME="${FUNCNAME[0]}";
    typeset -i ERROR_COUNT=0;
    typeset -i RETURN_CODE=0;
    typeset OUTPUT_FILE=$(mktemp -p /var/tmp);
    typeset SHAREPOINT_URL="https://sharepoint.mandtbank.com/sites/teamTI/Telecom/Ops%20Doc/QIP%20Documents";
    typeset REPORT_HEADERS=("Admin Name," "Admin Type," "First Name," "Last Name," "Email Address," "Phone Number");

    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} START: $(/usr/bin/env date +"${TIMESTAMP_OPTS}")";
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i START_EPOCH=$(/usr/bin/env date +"%s");

    [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -v || set +v;

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} -> enter";
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "Provided arguments: ${*}";

    /usr/bin/env printf "%s\n" "${REPORT_HEADERS[*]}" > ${OUTPUT_FILE};

    for ADMIN in $(qip-admin -ac get | /usr/bin/env grep "Login Name" | /usr/bin/env cut -d "=" -f 2)
    do
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "ADMIN -> ${ADMIN}";
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "EXEC -> qip-admin -ac get -n \"${ADMIN}\" -df n -f /var/tmp/${ADMIN}.txt";

        ## get the admin detail
        qip-admin -ac get -n ${ADMIN} -df n -f /var/tmp/${ADMIN}.txt;
        typeset -i RET_CODE=${?};

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "RET_CODE -> ${RET_CODE}";

        if [ -z "${RET_CODE}" -o ${RET_CODE} -ne 0 ]
        then
            writeLogEntry "ERROR" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "Unable to obtain user data for ${ADMIN}";
            writeLogEntry "STDERR" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "Unable to obtain user data for ${ADMIN}";

            (( ERROR_COUNT += 1 ));

            continue;
        fi

        typeset ADMIN_TYPE="$(/usr/bin/env grep "Type" /var/tmp/${ADMIN}.txt | /usr/bin/env cut -d "=" -f 2)";
        typeset FIRST_NAME="$(/usr/bin/env grep "First Name" /var/tmp/${ADMIN}.txt | /usr/bin/env cut -d "=" -f 2)";
        typeset LAST_NAME="$(/usr/bin/env grep "Last Name" /var/tmp/${ADMIN}.txt | /usr/bin/env cut -d "=" -f 2)";
        typeset EMAIL_ADDR="$(/usr/bin/env grep "Email" /var/tmp/${ADMIN}.txt | /usr/bin/env cut -d "=" -f 2)";
        typeset PHONE_NUMBER="$(/usr/bin/env grep "Phone" /var/tmp/${ADMIN}.txt | /usr/bin/env cut -d "=" -f 2)";

        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "ADMIN_TYPE -> ${ADMIN_TYPE}";
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "FIRST_NAME -> ${FIRST_NAME}";
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "LAST_NAME -> ${LAST_NAME}";
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "EMAIL_ADDR -> ${EMAIL_ADDR}";
        [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "PHONE_NUMBER -> ${PHONE_NUMBER}";

        /usr/bin/env printf "%s,%s,%s,%s,%s,%s\n" "${ADMIN}" "${ADMIN_TYPE}" "${FIRST_NAME}" "${LAST_NAME}" "${EMAIL_ADDR}" "${PHONE_NUMBER}" >> ${OUTPUT_FILE};

        [ -f /var/tmp/${ADMIN}.txt ] && /usr/bin/env rm -f /var/tmp/${ADMIN}.txt;

        [ ! -z "${ADMIN_TYPE}" ] && unset -v ADMIN_TYPE;
        [ ! -z "${FIRST_NAME}" ] && unset -v FIRST_NAME;
        [ ! -z "${LAST_NAME}" ] && unset -v LAST_NAME;
        [ ! -z "${EMAIL_ADDR}" ] && unset -v EMAIL_ADDR;
        [ ! -z "${PHONE_NUMBER}" ] && unset -v PHONE_NUMBER;
        [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
        [ ! -z "${ADMIN}" ] && unset -v ADMIN;
    done

    if [ -s "${OUTPUT_FILE}" ]
    then
        /usr/bin/env curl --ntlm --user "$(<${HOME}/.etc/sharepoint.creds)" --upload-file "${OUTPUT_FILE}" "${SHAREPOINT_URL}/QIPAdminList-$(date +"%m-%d-%Y").csv" | \
            /usr/bin/env tee -a ${LOG_ROOT}/${SCRIPT_NAME}-${FUNCTION_NAME}.log;
        typeset -i RET_CODE=${?};

        if [ -z "${RET_CODE}" -o ${RET_CODE} -ne 0 ]
        then
            writeLogEntry "ERROR" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "Unable to upload report data to Sharepoint.";
            writeLogEntry "STDERR" "${FUNCTION_NAME}" "${CNAME}" "${LINENO}" "Unable to upload report data to Sharepoint.";

            (( ERROR_COUNT += 1 ));
        else
            /usr/bin/env rm -f ${OUTPUT_FILE};
        fi
    fi

    typeset -i RETURN_CODE=${ERROR_COUNT};

    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "RETURN_CODE -> ${RETURN_CODE}";
    [ ! -z "${ENABLE_DEBUG}" -a "${ENABLE_DEBUG}" = "${_TRUE}" ] && writeLogEntry "DEBUG" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} -> exit";

    [ ! -z "${ADMIN_TYPE}" ] && unset -v ADMIN_TYPE;
    [ ! -z "${FIRST_NAME}" ] && unset -v FIRST_NAME;
    [ ! -z "${LAST_NAME}" ] && unset -v LAST_NAME;
    [ ! -z "${EMAIL_ADDR}" ] && unset -v EMAIL_ADDR;
    [ ! -z "${PHONE_NUMBER}" ] && unset -v PHONE_NUMBER;
    [ ! -z "${RET_CODE}" ] && unset -v RET_CODE;
    [ ! -z "${ADMIN}" ] && unset -v ADMIN;
    [ ! -z "${ERROR_COUNT}" ] && unset -v ERROR_COUNT;
    [ ! -z "${RETURN_CODE}" ] && unset -v RETURN_CODE;
    [ ! -z "${OUTPUT_FILE}" ] && unset -v OUTPUT_FILE;
    [ ! -z "${REPORT_HEADERS}" ] && unset -v REPORT_HEADERS;

    [ ! -z "${ENABLE_VERBOSE}" -a "${ENABLE_VERBOSE}" = "${_TRUE}" ] && set -x || set +x;
    [ ! -z "${ENABLE_TRACE}" -a "${ENABLE_TRACE}" = "${_TRUE}" ] && set -x || set +x;

    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i END_EPOCH=$(/usr/bin/env date +"%s");
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && typeset -i RUNTIME=$(( START_EPOCH - END_EPOCH ));
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} TOTAL RUNTIME: $(( RUNTIME / 60)) MINUTES, TOTAL ELAPSED: $(( RUNTIME % 60)) SECONDS";
    [ ! -z "${ENABLE_PERFORMANCE}" -a "${ENABLE_PERFORMANCE}" = "${_TRUE}" ] && writeLogEntry "PERFORMANCE" "${SCRIPT_NAME}" "${LINENO}" "${FUNCTION_NAME}" "${FUNCTION_NAME} END: $(/usr/bin/env date +"${TIMESTAMP_OPTS}")";

    [ ! -z "${FUNCTION_NAME}" ] && unset -v FUNCTION_NAME;
    [ ! -z "${SCRIPT_NAME}" ] && unset -v SCRIPT_NAME;

    return ${RETURN_CODE};
}

