#==============================================================================
#
#          FILE:  logging.properties
#         USAGE:  n/a
#   DESCRIPTION:  Property file containing application resource information
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Kevin Huntly <kmhuntly@gmail.com>
#       COMPANY:  ---
#       VERSION:  1.0
#       CREATED:  ---
#      REVISION:  ---
#
#==============================================================================

[ -z "${_TRUE}" ] && typeset _TRUE="true";
[ -z "${_FALSE}" ] && typeset _FALSE="false";

#==============================================================================
# enable various items for logging. usually used in debugging during
# development, but can be used for edge cases in a production setting.
#
# LOGGER: Full path to the logging utility. CANNOT BE OVERRIDDEN.
# LOG_DIR: Full path to the directory logs are written to. Variables can be used.
#          This is a global and per-plugin variable. If a plugin desires to
#          override, it can.
# ARCHIVE_LOG_ROOT: The directory archive logs are written to, relative to log_root
#          This is a global and per-plugin variable. If a plugin desires to
#          override, it can.
#==============================================================================
typeset -x LOG_ROOT=${HOME}/.log;
typeset -x ARCHIVE_LOG_ROOT=${LOG_ROOT}/archive;

[ ! -z "${LOG_ROOT}" ] && mkdir -p "${LOG_ROOT}";
[ ! -z "${ARCHIVE_LOG_ROOT}" ] && mkdir -p "${ARCHIVE_LOG_ROOT}";

#==============================================================================
# enable various items for logging. usually used in debugging during
# development, but can be used for edge cases in a production setting.
#
#    ENABLE_DEBUG: true/false - if debug is on a lot of messages about runtime
#                  will get printed to the debug log
#    ENABLE_TRACE: true/false - turns on shell debug (set -vx)
#==============================================================================
typeset -x ENABLE_DEBUG="${_FALSE}";
typeset -x ENABLE_VERBOSE="${_FALSE}";
typeset -x ENABLE_TRACE="${_FALSE}";
typeset -x ENABLE_PERFORMANCE="${_FALSE}";

#==============================================================================
# enable/disable logging verbosity for the actual logger. don't use this
# unless you *really* need to.
#
#    ENABLE_DEBUG: true/false - if debug is on a lot of messages about runtime
#                  will get printed to the debug log
#    ENABLE_TRACE: true/false - turns on shell debug (set -vx)
#==============================================================================
typeset -x ENABLE_LOGGER_DEBUG="${_FALSE}";
typeset -x ENABLE_LOGGER_VERBOSE="${_FALSE}";
typeset -x ENABLE_LOGGER_TRACE="${_FALSE}";
typeset -x ENABLE_LOGGER_PERFORMANCE="${_FALSE}";

#==============================================================================
# file rotation properties. can rotate on file size or create time. n number
# of logs will be kept in the current log directory, all others are relocated
# to the archive. if a log is eligible for rotation, and a file exists in the
# current log dir with that name, then the file with the desired name is moved
# to the archive and the file is renamed, otherwise the file is simply renamed.
#
#      ROLLOVER_PERIOD: How long should active files be kept around ?
# LOG_RETENTION_PERIOD: How many logs should we keep around ?
#      FILE_SIZE_LIMIT: How big, in KB, will we allow files to get ?
#      ARCHIVE_ENABLED: Do we keep logs in an archive ?
#==============================================================================
typeset -x FILE_SIZE_LIMIT=51200;
typeset -x LOG_RETENTION_PERIOD=7;
typeset -x ROLLOVER_PERIOD=24;
typeset -x ARCHIVE_ENABLED=true;

#==============================================================================
# conversion pattern. based off log4j. using log4j items in the conversion
#
#       CONVERSION_PATTERN: How should we translate and present information ?
# The conversion pattern goes like this:
# %d - date/time
# %t - thread
# %c - log file
# %l - log level
# %F - source file
# %L - line number
# %m - message
#             DATE_PATTERN: Date pattern for log files
#                           - LOG_NAME.DATE_PATTERN
#==============================================================================
typeset -x CONVERSION_PATTERN="[Time: %s][Thread: %s][Log: %s][Level: %s] - [File: %s:%s] [Method: %s] - %s";
typeset -x TIMESTAMP_OPTS="%d/%m/%Y %H:%M:%S,%N";
typeset -x DATE_PATTERN=$(date +"%Y-%m-%d");

## Define the log file names
typeset -x PERF_LOG_FILE=performance.log;
typeset -x ERROR_LOG_FILE=error.log;
typeset -x DEBUG_LOG_FILE=debug.log;
typeset -x AUDIT_LOG_FILE=audit.log;
typeset -x WARN_LOG_FILE=warn.log;
typeset -x INFO_LOG_FILE=info.log;

## set out a flag indicating logging is already loaded
typeset -x LOGGING_LOADED=true;
